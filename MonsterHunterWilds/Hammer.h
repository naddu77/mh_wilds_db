#pragma once
#include "Hammer.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::MonsterHunterWilds::implementation
{
    struct Hammer : HammerT<Hammer>
    {
        Hammer() = default;

        Hammer(int32_t id, int32_t game_id, winrt::MonsterHunterWilds::WeaponKind const& kind, hstring const& name, int32_t rarity, winrt::MonsterHunterWilds::WeaponDamage const& damage, winrt::Windows::Foundation::Collections::IVector<winrt::MonsterHunterWilds::WeaponSpecial> const& specials, winrt::MonsterHunterWilds::Sharpness const& sharpness, winrt::Windows::Foundation::Collections::IVector<int32_t> const& handicraft, winrt::Windows::Foundation::Collections::IVector<winrt::MonsterHunterWilds::SkillRank> const& skills, int32_t defense_bonus, winrt::MonsterHunterWilds::Elderseal const& elderseal, int32_t affinity, winrt::Windows::Foundation::Collections::IVector<int32_t> const& slots, winrt::MonsterHunterWilds::WeaponCrafting const& crafting, winrt::MonsterHunterWilds::WeaponSeries const& series);
        static winrt::MonsterHunterWilds::Hammer Parse(winrt::Windows::Data::Json::JsonObject const& json_object);
        int32_t Id();
        int32_t GameId();
        winrt::MonsterHunterWilds::WeaponKind Kind();
        hstring Name();
        int32_t Rarity();
        winrt::MonsterHunterWilds::WeaponDamage Damage();
        winrt::Windows::Foundation::Collections::IVector<winrt::MonsterHunterWilds::WeaponSpecial> Specials();
        winrt::MonsterHunterWilds::Sharpness Sharpness();
        winrt::Windows::Foundation::Collections::IVector<int32_t> Handicraft();
        winrt::Windows::Foundation::Collections::IVector<winrt::MonsterHunterWilds::SkillRank> Skills();
        int32_t DefenseBonus();
        winrt::MonsterHunterWilds::Elderseal Elderseal();
        int32_t Affinity();
        winrt::Windows::Foundation::Collections::IVector<int32_t> Slots();
        winrt::MonsterHunterWilds::WeaponCrafting Crafting();
        winrt::MonsterHunterWilds::WeaponSeries Series();
    };
}
namespace winrt::MonsterHunterWilds::factory_implementation
{
    struct Hammer : HammerT<Hammer, implementation::Hammer>
    {
    };
}
